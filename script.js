const faqs = document.querySelectorAll(".faqbox")
faqs.forEach((faq) => {
  faq.addEventListener("click", () => {
    faq.classList.toggle("open")
  })
})

const backToTopBtn = document.getElementById("backToTopBtn")
const circularProgress = document.querySelector(".circular-progress .circle-progress")
const circumference = 2 * Math.PI * 15.9155 // Circumference of the circle (radius 15.9155)

// Set initial dasharray for the circle progress
circularProgress.style.strokeDasharray = `${circumference} ${circumference}`
circularProgress.style.strokeDashoffset = circumference // Start fully hidden

window.addEventListener("scroll", () => {
  // Calculate scroll percentage for the circular progress
  const scrollTop = document.documentElement.scrollTop || document.body.scrollTop
  const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight
  const clientHeight = document.documentElement.clientHeight || document.body.clientHeight

  const scrollPercentage = (scrollTop / (scrollHeight - clientHeight)) * 100

  // Update the circular progress
  const offset = circumference - (scrollPercentage / 100) * circumference
  circularProgress.style.strokeDashoffset = offset

  // Show/hide back to top button
  if (scrollTop > 300) {
    backToTopBtn.style.display = "flex"
  } else {
    backToTopBtn.style.display = "none"
  }

  const navbar = document.getElementById("navbar")
  if (window.scrollY > 50) {
    navbar.classList.add("scrolled")
  } else {
    navbar.classList.remove("scrolled")
  }
})

function scrollToTop() {
  window.scrollTo({ top: 0, behavior: "smooth" })
}

function handleFormSubmit() {
  const emailInputs = document.querySelectorAll('input[type="email"]')
  let email = ""

  emailInputs.forEach((input) => {
    if (input.value) email = input.value
  })

  if (!email) {
    alert("Hey there! ЁЯСЛ Please enter your email address to get started!")
    return
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  if (!emailRegex.test(email)) {
    alert("Oops! ЁЯШЕ Please enter a valid email address (like: you@example.com)")
    return
  }

  alert(`Awesome! ЁЯОЙ Welcome aboard! We'll send updates to ${email}`)

  emailInputs.forEach((input) => (input.value = ""))
}

const observerOptions = {
  threshold: 0.1,
  rootMargin: "0px 0px -100px 0px",
}

const observer = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.classList.add("animated")
    }
  })
}, observerOptions)

document.querySelectorAll(".animate-on-scroll").forEach((el) => {
  observer.observe(el)
})

document.addEventListener("DOMContentLoaded", () => {
  const emailInputs = document.querySelectorAll('input[type="email"]')

  emailInputs.forEach((input) => {
    input.addEventListener("blur", function () {
      const email = this.value
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/

      if (email && !emailRegex.test(email)) {
        this.classList.add("error")
        setTimeout(() => {
          this.classList.remove("error")
        }, 3000)
      }
    })

    input.addEventListener("input", function () {
      this.classList.remove("error")
    })
  })
})

console.log("ЁЯН┐ Welcome to Netflix Clone! Made with тЭдя╕П ")


// Loading Animation with Netflix Intro
document.addEventListener('DOMContentLoaded', function() {
    const loadingScreen = document.getElementById('loadingScreen');
    const body = document.body;

    if (loadingScreen) {
        // Prevent scrolling during loading
        body.style.overflow = 'hidden';

        // Listen for message from iframe when animation completes
        window.addEventListener('message', function(event) {
            if (event.data === 'netflix-animation-complete') {
                // Fade out loading screen
                loadingScreen.classList.add('fade-out');
                body.style.overflow = 'auto';

                // Remove loading screen after fade
                setTimeout(() => {
                    if (loadingScreen && loadingScreen.parentNode) {
                        loadingScreen.remove();
                    }
                }, 800);
            }
        });

        // Fallback timeout in case message doesn't come through
        setTimeout(() => {
            if (loadingScreen && loadingScreen.parentNode) {
                loadingScreen.classList.add('fade-out');
                body.style.overflow = 'auto';
                setTimeout(() => {
                    if (loadingScreen && loadingScreen.parentNode) {
                        loadingScreen.remove();
                    }
                }, 800);
            }
        }, 5500); // 5.5 seconds fallback
    }
});





document.addEventListener("DOMContentLoaded", function () {
    const currentUser = localStorage.getItem("netflixCurrentUser");

    const homeLink = document.querySelector('a[href="home.html"]');
    if (!currentUser && homeLink) {
      homeLink.addEventListener("click", function (e) {
        e.preventDefault(); 
        alert("Please sign in to access Home.");
        window.location.href = "index.html"; 
      });
    }
  });
    function setLanguage(lang) {
    const elements = document.querySelectorAll('[data-i18n]');
    elements.forEach(el => {
      const key = el.getAttribute('data-i18n');
      if (translations[lang] && translations[lang][key]) {
        el.textContent = translations[lang][key];
      }
    });
  }

  // Optional: Set default language to English on page load
  document.addEventListener('DOMContentLoaded', () => setLanguage('en'));

  // Toggle button listener
  document.querySelector("#lang-toggle").addEventListener("click", function () {
    const currentLang = this.getAttribute("data-lang");
    const newLang = currentLang === "en" ? "hi" : "en";
    setLanguage(newLang);
    this.setAttribute("data-lang", newLang);
    this.innerHTML = newLang === "en" ? `<i class="fas fa-globe"></i> English` : `<i class="fas fa-globe"></i> рд╣рд┐рдиреНрджреА`;
  });

  // Language data
  // Language data
const translations = {
  en: {
    faq_heading: "Frequently Asked Questions",
    faq_q1: "What is Netflix?",
    faq_a1: "Netflix is a streaming service that offers award-winning TV shows, movies, anime, documentaries, and more.",
    faq_q2: "How much does Netflix cost?",
    faq_a2: "Netflix plans range from тВ╣149 to тВ╣649 per month. You can watch on your phone, tablet, TV, laptop, and more.",
    faq_q3: "What can I watch on Netflix?",
    faq_a3: "You can watch movies, TV shows, anime, Netflix originals, and much more on Netflix.",
    faq_q4: "Where can I watch?",
    faq_a4: "You can watch Netflix on any internet-connected device тАФ mobile, laptop, TV, or computer.",
    faq_q5: "Is Netflix good for kids?",
    faq_a5: "The Netflix Kids experience provides parental controls while offering family-friendly content for children.",
    faq_cta: "Ready to watch? Enter your email to create or restart your membership.",
    nav_home: "Home",
    nav_tvshows: "TV Shows",
    nav_movies: "Movies",
    nav_newpopular: "New & Popular",
    nav_mylist: "My List",
     hero_title: "Unlimited movies, TV shows and more",
    hero_subtitle: "Starts at тВ╣149. Cancel at any time.",
     ready: "Ready to watch? Enter your email to create or restart your membership.",
     getStarted: "Get Started >",
      enjoyTV: "Enjoy on your TV",
    tvDescription: "Watch on smart TVs, PlayStation, Xbox, Chromecast, Apple TV, Blu-ray players and more.",
     download_title: "Download your shows to watch offline",
    download_desc: "Save your favourites easily and always have something to watch.",
    watch_everywhere_title: "Watch everywhere",
    watch_everywhere_desc: "Stream unlimited movies and TV shows on your phone, tablet, laptop, and TV.",
    kids_profiles_title: "Create profiles for kids",
    kids_profiles_desc: "Send children on adventures with their favourite characters in a space made just for themтАФfree with your membership."
    
  
    

  },
  hi: {
    faq_heading: "рдЕрдХреНрд╕рд░ рдкреВрдЫреЗ рдЬрд╛рдиреЗ рд╡рд╛рд▓реЗ рдкреНрд░рд╢реНрди",
    faq_q1: "Netflix рдХреНрдпрд╛ рд╣реИ?",
    faq_a1: "Netflix рдПрдХ рд╕реНрдЯреНрд░реАрдорд┐рдВрдЧ рд╕реЗрд╡рд╛ рд╣реИ рдЬреЛ рдЯреАрд╡реА рд╢реЛ, рдлрд┐рд▓реНрдореЗрдВ, рдПрдиреАрдореЗ, рдбреЙрдХреНрдпреВрдореЗрдВрдЯреНрд░реА рдФрд░ рдмрд╣реБрдд рдХреБрдЫ рдкреНрд░рджрд╛рди рдХрд░рддреА рд╣реИред",
    faq_q2: "Netflix рдХреА рдХреАрдордд рдХрд┐рддрдиреА рд╣реИ?",
    faq_a2: "Netflix рдХреА рдпреЛрдЬрдирд╛рдПрдВ тВ╣149 рд╕реЗ тВ╣649 рдкреНрд░рддрд┐ рдорд╛рд╣ рддрдХ рд╣реИрдВред рдЖрдк рдЕрдкрдиреЗ рдлрд╝реЛрди, рдЯреИрдмрд▓реЗрдЯ, рдЯреАрд╡реА, рд▓реИрдкрдЯреЙрдк рдЖрджрд┐ рдкрд░ рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВред",
    faq_q3: "рдореИрдВ Netflix рдкрд░ рдХреНрдпрд╛ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реВрдБ?",
    faq_a3: "Netflix рдкрд░ рдЖрдкрдХреЛ рдлрд┐рд▓реНрдореЗрдВ, рдЯреАрд╡реА рд╢реЛ, рдПрдиреАрдореЗ, рдиреЗрдЯрдлреНрд▓рд┐рдХреНрд╕ рдУрд░рд┐рдЬрд┐рдирд▓реНрд╕ рдФрд░ рдмрд╣реБрдд рдХреБрдЫ рджреЗрдЦрдиреЗ рдХреЛ рдорд┐рд▓реЗрдЧрд╛ред",
    faq_q4: "рдореИрдВ рдХрд╣рд╛рдВ рджреЗрдЦ рд╕рдХрддрд╛ рд╣реВрдБ?",
    faq_a4: "рдЖрдк рдХрд┐рд╕реА рднреА рдЗрдВрдЯрд░рдиреЗрдЯ рд╕реЗ рдЬреБрдбрд╝реЗ рдбрд┐рд╡рд╛рдЗрд╕ рдкрд░ Netflix рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВ тАФ рдореЛрдмрд╛рдЗрд▓, рд▓реИрдкрдЯреЙрдк, рдЯреАрд╡реА, рдпрд╛ рдХрдВрдкреНрдпреВрдЯрд░ рдкрд░ред",
    faq_q5: "рдХреНрдпрд╛ Netflix рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛ рд╣реИ?",
    faq_a5: "Netflix Kids рдЕрдиреБрднрд╡ рдорд╛рддрд╛-рдкрд┐рддрд╛ рдХреЛ рдирд┐рдпрдВрддреНрд░рдг рджреЗрддреЗ рд╣реБрдП рдмрдЪреНрдЪреЛрдВ рдХреЛ рдкрд░рд┐рд╡рд╛рд░ рдХреЗ рдЕрдиреБрдХреВрд▓ рд╕рд╛рдордЧреНрд░реА рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред",
    faq_cta: "рджреЗрдЦрдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ? рдЕрдкрдиреА рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ рдФрд░ рд╕рджрд╕реНрдпрддрд╛ рд╢реБрд░реВ рдХрд░реЗрдВред",
    nav_home: "рд╣реЛрдо",
    nav_tvshows: "рдЯреАрд╡реА рд╢реЛ",
    nav_movies: "рдлрд┐рд▓реНрдореЗрдВ",
    nav_newpopular: "рдирдпрд╛ рдФрд░ рд▓реЛрдХрдкреНрд░рд┐рдп",
    nav_mylist: "рдореЗрд░реА рд╕реВрдЪреА",
    hero_title: "рдЕрд╕реАрдорд┐рдд рдлрд╝рд┐рд▓реНрдореЗрдВ, рдЯреАрд╡реА рд╢реЛ рдФрд░ рдмрд╣реБрдд рдХреБрдЫ",
    hero_subtitle: "тВ╣149 рд╕реЗ рд╢реБрд░реВред рдХрднреА рднреА рд░рджреНрдж рдХрд░реЗрдВред",
    ready: "рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ? рдЕрдкрдирд╛ рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ рддрд╛рдХрд┐ рдЖрдк рдЕрдкрдиреА рд╕рджрд╕реНрдпрддрд╛ рд╢реБрд░реВ рдпрд╛ рдкреБрдирдГ рд╢реБрд░реВ рдХрд░ рд╕рдХреЗрдВред",
        getStarted: "рд╢реБрд░реВ рдХрд░реЗрдВ >",
         enjoyTV: "рдЕрдкрдиреЗ рдЯреАрд╡реА рдкрд░ рдЖрдирдВрдж рд▓реЗрдВ",
    tvDescription: "рд╕реНрдорд╛рд░реНрдЯ рдЯреАрд╡реА, рдкреНрд▓реЗрд╕реНрдЯреЗрд╢рди, рдПрдХреНрд╕рдмреЙрдХреНрд╕, рдХреНрд░реЛрдордХрд╛рд╕реНрдЯ, рдПрдкреНрдкрд▓ рдЯреАрд╡реА, рдмреНрд▓реВ-рд░реЗ рдкреНрд▓реЗрдпрд░ рдФрд░ рдЕрдзрд┐рдХ рдкрд░ рджреЗрдЦреЗрдВред",
    download_title: "рдЕрдкрдиреЗ рд╢реЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ рдФрд░ рдСрдлрд╝рд▓рд╛рдЗрди рджреЗрдЦреЗрдВ",
    download_desc: "рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рдЪреАрдЬрд╝реЗрдВ рдЖрд╕рд╛рдиреА рд╕реЗ рд╕рд╣реЗрдЬреЗрдВ рдФрд░ рд╣рдореЗрд╢рд╛ рдХреБрдЫ рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП рд░рдЦреЗрдВред",
    watch_everywhere_title: "рд╣рд░ рдЬрдЧрд╣ рджреЗрдЦреЗрдВ",
    watch_everywhere_desc: "рдЕрдкрдиреЗ рдлреЛрди, рдЯреИрдмрд▓реЗрдЯ, рд▓реИрдкрдЯреЙрдк рдФрд░ рдЯреАрд╡реА рдкрд░ рдЕрд╕реАрдорд┐рдд рдлрд┐рд▓реНрдореЗрдВ рдФрд░ рдЯреАрд╡реА рд╢реЛ рд╕реНрдЯреНрд░реАрдо рдХрд░реЗрдВред",
    kids_profiles_title: "рдмрдЪреНрдЪреЛрдВ рдХреЗ рд▓рд┐рдП рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдмрдирд╛рдПрдВ",
    kids_profiles_desc: "рдмрдЪреНрдЪреЛрдВ рдХреЛ рдЙрдирдХреЗ рдкрд╕рдВрджреАрджрд╛ рдХрд┐рд░рджрд╛рд░реЛрдВ рдХреЗ рд╕рд╛рде рд░реЛрдорд╛рдВрдЪ рдкрд░ рднреЗрдЬреЗрдВ, рдЙрдирдХреЗ рд▓рд┐рдП рдЦрд╛рд╕ рдЬрдЧрд╣ рдореЗрдВ тАФ рдЖрдкрдХреЗ рдореЗрдВрдмрд░рд╢рд┐рдк рдХреЗ рд╕рд╛рде рдореБрдлреНрддред"
  },


  
    
  
};

let currentLang = "en"; // default

// Function to update all elements with data-i18n
function setLanguage(lang) {
  const elements = document.querySelectorAll("[data-i18n]");
  elements.forEach(el => {
    const key = el.getAttribute("data-i18n");
    if (translations[lang] && translations[lang][key]) {
      el.textContent = translations[lang][key];
    }
  });
}

// Button click listener
document.getElementById("lang-toggle").addEventListener("click", function () {
  currentLang = currentLang === "en" ? "hi" : "en";
  setLanguage(currentLang);

  // Update button text
  this.setAttribute("data-lang", currentLang);
  this.innerHTML = currentLang === "en"
    ? `<i class="fas fa-globe"></i> English`
    : `<i class="fas fa-globe"></i> рд╣рд┐рдиреНрджреА`;
});

// Set default language on page load
document.addEventListener("DOMContentLoaded", () => {
  setLanguage(currentLang);
});
